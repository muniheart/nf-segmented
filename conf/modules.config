env.APPTAINER_MESSAGELEVEL=5
env.SINGULARITY_MESSAGELEVEL=5

/*
 *  val data                       // [ meta, [work_1.sqfs,work_1], ..., [work_{i-1}.sqfs,work_{i-1}] ]
 *
 *  Each element data[i], i>0, is a pair: ( symlink to image of workdir, symlink to workdir ).
 *
 *  Call with 'resolve_source=false' to generate bind-mounts for NFCORE_DEMO container.
 *  Call with 'resolve_source=true' to generate bind-mounts for nested containers.
 *
 */
def get_image_mount_args( data, resolve_source=false )
{
    data.subList( 1, data.size() )
    .collect { a,b -> "${ resolve_source ? a.resolveSymLink() : a }:${b.resolveSymLink()}:image-src=/" }
    .join(",")
}

process {
    withName: NFCORE_DEMO {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            pattern : 'nextflow.log',
            saveAs: { "nextflow_${task.index}.log" }
        ]

        ext.image_mounts = { get_image_mount_args( data ) }

        ext.image_mounts_absolute = { get_image_mount_args( data, true ) }

        containerOptions = {

            env_vars = \
                [
                    "NXF_APPTAINER_CACHEDIR=\${NXF_APPTAINER_CACHEDIR}",
                    "NXF_HOME=\${NXF_HOME}",
                    "NXF_OFFLINE=\${NXF_OFFLINE}",
                    "NXF_CACHE_DIR=${cache_dir.resolveSymLink()}",
                    "${params.env_vars}"
                ].join(",")
        
            bind_mounts = \
                [
                    params.bind_mounts,
                    cache_dir.resolveSymLink(),
                ].findAll().join(",")

            [
                env_vars            ? "--env ${env_vars}" : "",
                params.mount_images ? ( task.ext.image_mounts ? "-B ${task.ext.image_mounts}" : "" ) : "",
                bind_mounts         ? "-B ${bind_mounts}" : "",
                env_file            ? "--env-file ${env_file}" : ""
            ].join(" ").trim()
        }
    }

    withName: SQUASH_WORK: {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            pattern: '*sqfs',
        ]
    }
}
