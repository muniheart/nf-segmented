env.APPTAINER_MESSAGELEVEL=5
env.SINGULARITY_MESSAGELEVEL=5

def get_image_mount_args( data, absolute_source=false )
{
    data.grep { it=~/sqfs$/ }
    .collect {
        base_name = it.getSimpleName()                      // work_i.sqfs -> work_i
        [
            image:      absolute_source ?
                            it.resolveSymLink() : it,
            target:     it.resolveSymLink()                 // realpath of image
                        .resolveSibling( base_name )        // resolve work-dir that is source of image
                        .resolveSymLink()                   // realpath of work-dir
        ]
    }.collect { "${it.image}:${it.target}:image-src=/" }.join(",") ?: ""
}

def as_list = { x -> x ? ( x instanceof List ? x : [x] ) : [] }

process {
    withName: NFCORE_DEMO {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            pattern : 'nextflow.log',
            saveAs: { "nextflow_${task.index}.log" }
        ]

        
        /*
         *  Input 'data' is: [ params_i.yaml, work_1.sqfs, work_2.sqfs, ..., work_{i-1}.sqfs ]
         *
         *  Mount each image at the canonical ( physical ) path of its base work-dir.
         *
         */
        ext.image_mounts = {
            get_image_mount_args( as_list( data ) )
        }

        ext.image_mounts_absolute = {
            get_image_mount_args( as_list( data ), true )
        }

        containerOptions = {

            env_vars = \
                [
                    "NXF_APPTAINER_CACHEDIR=\${NXF_APPTAINER_CACHEDIR}",
                    "NXF_HOME=\${NXF_HOME}",
                    "NXF_OFFLINE=\${NXF_OFFLINE}",
                    "NXF_CACHE_DIR=${cache_dir.resolveSymLink()}",
                    "${params.env_vars}"
                ].join(",")
        
            bind_mounts = \
                [
                    params.bind_mounts,
                    cache_dir.resolveSymLink(),
                ].findAll().join(",")

            [
                env_vars            ? "--env ${env_vars}" : "",
                params.mount_images ? ( task.ext.image_mounts ? "-B ${task.ext.image_mounts}" : "" ) : "",
                bind_mounts         ? "-B ${bind_mounts}" : "",
            ].join(" ").trim()
        }
    }

    withName: SQUASH_WORK: {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            pattern: '*sqfs',
        ]
    }
}
